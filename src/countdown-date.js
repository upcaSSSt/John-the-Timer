import { CronJob } from 'cron';
import { msOffset } from './global/global.js';
import PastDate from './past-date.js';
import notice from './notice.js';

export default class CountdownDate extends PastDate {
  static #farewellGreetings = ['–ù–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞', '–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ', 'ü•≥'];

  #farewell;
  #cron;

  static singleJob;

  constructor(name, date, defaultOffset, userOffset = 3, farewell = '–ü—Ä–æ—â–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç...') {
    super(name, date, defaultOffset, userOffset, Math.floor);
    this.#farewell = farewell;
  }

  get type() {
    return '–æ–¥–∏–Ω–æ—á–Ω–∞—è';
  }

  set cron(job) {
    this.#cron = new CronJob(new Date(this.shiftTimezone()), job);
  }

  toJSON() {
    return Object.assign(super.toJSON(), { farewell: this.#farewell });
  }
  
  oldValues() {
    const res = super.oldValues();
    res.push([this.#farewell]);
    return res;
  }

  farewellNotice() {
    return notice(this._userOffset, this._msgUserOffset, CountdownDate.#farewellGreetings, { name: this.name, value: this.#farewell });
  }

  switchDate(delta) {
    this._date = new Date(this._date.getFullYear() + delta.year, this._date.getMonth() + delta.month, this._date.getDate() + delta.day, this._date.getHours() + delta.hour, this._date.getMinutes());
  }

  validate() {
    if (this.shiftTimezone() <= new Date().getTime())
      return '–î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—à–ª–æ–π';
    this.#cron.start();
    return '';
  }

  stop() {
    super.stop();
    console.log(this.#cron ? '–Ω–µ –Ω–∞–ª' : '–Ω–∞–ª');
    this.#cron?.stop(); ////
  }
}
